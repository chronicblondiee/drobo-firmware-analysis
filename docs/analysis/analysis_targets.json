{
  "bypass_lock_system": {
    "priority": "HIGH",
    "description": "Bypass lock system - most promising for JBOD enablement",
    "functions": [
      "bypassLocksCommand",
      "bypassLocksCommandHandler",
      "SetLockBypass",
      "bypassLocks"
    ],
    "strings": [
      "Usage: bypassLocks [true|false]",
      "Setting lock bypass to",
      "Diags bypass locks feature is ENABLED",
      "Bypass of CATM lock is ENABLED"
    ],
    "analysis_focus": [
      "Find function that processes bypassLocks command",
      "Locate boolean flag that controls bypass state",
      "Identify what locks are bypassed when enabled",
      "Check if bypass affects disk access mode"
    ]
  },
  "esa_passthrough": {
    "priority": "HIGH",
    "description": "ESA (Enclosure Services Agent) passthrough system",
    "functions": [
      "esaPassthroughCommand",
      "esaPassthroughCommand::parseCommandLine",
      "esaPassthroughCommand::ExecuteCommand",
      "DebugClass::esaPassthroughCommand"
    ],
    "strings": [
      "esaPassthroughCommand: parseCommandLine->",
      "esaPassthroughCommand: ExecuteCommand start,argc=",
      "esaPassthroughCommand: ExecuteCommand done, time=",
      "ESA: executing command"
    ],
    "analysis_focus": [
      "Understand ESA command structure and parameters",
      "Find how esapass command routes to individual drives",
      "Identify authentication/permission checks",
      "Map command flow from console to drive hardware"
    ]
  },
  "usb_direct_access": {
    "priority": "MEDIUM",
    "description": "USB Direct Access mode for SCSI passthrough",
    "functions": [
      "usb2MscDirectAccessScsiPassThrough",
      "usb2MscDirectAccessIoctl",
      "USB2_MSC_DA_SCSI_PASS_THROUGH"
    ],
    "strings": [
      "ERRR: usb2Msc - Direct Access not enabled",
      "usb2Msc - USB2_MSC_DA_SCSI_PASS_THROUGH",
      "ERRR: usb2Msc - PassThrough failed, can not allow IO"
    ],
    "analysis_focus": [
      "Find the check that returns 'Direct Access not enabled'",
      "Locate the flag/condition that enables direct access",
      "Understand USB mass storage device passthrough flow",
      "Identify how to enable compliance test mode"
    ]
  },
  "j2_journal_bypass": {
    "priority": "MEDIUM",
    "description": "J2 journal passthrough mode",
    "functions": [
      "J2Manager",
      "J2PassthroughMode",
      "SetJ2PassthroughMode"
    ],
    "strings": [
      "J2 journal pass through mode is disabled",
      "J2Manager Perf info",
      "j2 = J2Manager Perf info"
    ],
    "analysis_focus": [
      "Find J2 journal bypass enable/disable mechanism",
      "Understand how journal bypass affects disk I/O",
      "Locate configuration storage for passthrough mode",
      "Check interaction with RAID protection"
    ]
  },
  "disk_manager_bypass": {
    "priority": "MEDIUM",
    "description": "Disk Manager bypass queue functionality",
    "functions": [
      "DiskManager::FlushAllDisksBypassQueue",
      "dm_flushbypass_handler",
      "flushbypass"
    ],
    "strings": [
      "Usage:  dm  flushbypass  - does sequential disk flush on all disks",
      "Finished DiskManager::GetInstance().FlushAllDisksBypassQueue()",
      "ERROR: unmapBlocksBypassQueue on disk"
    ],
    "analysis_focus": [
      "Understand bypass queue vs normal queue differences",
      "Find how flushbypass enables sequential disk access",
      "Check if bypass queue can be used for general I/O",
      "Identify performance and protection trade-offs"
    ]
  }
}